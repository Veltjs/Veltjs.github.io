{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting Started Velt is one of the best plugins for running JS code on Spigot. Velt tries to give you as many utilities for running Spigot code as possible, but it doesn't provide unnecessary modules that aren't useful for creating concise and simple scripts. As Velt provides you almost the same modules as NodeJS does, many of your same npm scripts should be able to run using Velt, and you can install npm modules on Velt. Velt is public and you can download it from its Github page here. You can find the latest releases to download here . Modules Velt offers modules to help make your scripting easier. Info Velt offers the same require syntax which is used in Node to import modules. Velt also offers many node modules which you can use, as one of Velt's goals is for you to be able to run node scripts and modules in Velt just fine. The two main modules in Velt are velt and velt-helpers . The velt module The velt module is the main module for you to use, offering variables that you can utilize to make powerful scripts. Below is a list of variables the module offers. Variable Description server The server variable allows for handling callbacks, specifically commands and events, alongside helpful functions to do specific tasks like getting an array of worlds, broadcasting a message, etc cast Allows for casting variables to specific types. Below is an example of using the server variable of velt. const { server } = require ( 'velt' ); server . createCommand ( 'abc' , { playerOnly : 'Only players can run this' }, async sender => { sender . sendMessage ( 'Tell me \"hello\"!' ); while ( true ) { //manager.waitFor allows asynchronously for us to wait for an event that matches the condition. let event = await server . waitFor ( 'AsyncPlayerChatEvent' , event => event . getPlayer () === sender ); if ( event . getMessage () == 'hello' ) { sender . sendMessage ( 'Good job.' ); event . setCancelled ( true ); return ; } else { sender . sendMessage ( `I said tell me hello, not ${ event . getMessage () } ` ); event . setCancelled ( true ); } } }); The velt-helpers module The velt-helpers module offers classes which can help make your code easier to read and more concise. Below is an example of using the Gui class of velt-helpers . const { server } = require ( 'velt' ); const { Gui } = require ( 'velt-helpers' ); server . createCommand ( 'showgui' , sender => { if ( manager . isConsole ( sender )) { sender . sendMessage ( 'Only players can run this' ); return ; } new Gui ( 'My Gui' , 36 ) . format ( 0 , 'wooden sword' , () => { sender . sendMessage ( 'You clicked me' ); }) . show ( sender ); }); Node modules Many NodeJS core modules are supported, but particularly, the following aren't supported: http https ws vm The fs module also is only partially supported.","title":"Getting Started"},{"location":"#getting-started","text":"Velt is one of the best plugins for running JS code on Spigot. Velt tries to give you as many utilities for running Spigot code as possible, but it doesn't provide unnecessary modules that aren't useful for creating concise and simple scripts. As Velt provides you almost the same modules as NodeJS does, many of your same npm scripts should be able to run using Velt, and you can install npm modules on Velt. Velt is public and you can download it from its Github page here. You can find the latest releases to download here .","title":"Getting Started"},{"location":"#modules","text":"Velt offers modules to help make your scripting easier.","title":"Modules"},{"location":"#info","text":"Velt offers the same require syntax which is used in Node to import modules. Velt also offers many node modules which you can use, as one of Velt's goals is for you to be able to run node scripts and modules in Velt just fine. The two main modules in Velt are velt and velt-helpers .","title":"Info"},{"location":"#the-velt-module","text":"The velt module is the main module for you to use, offering variables that you can utilize to make powerful scripts. Below is a list of variables the module offers. Variable Description server The server variable allows for handling callbacks, specifically commands and events, alongside helpful functions to do specific tasks like getting an array of worlds, broadcasting a message, etc cast Allows for casting variables to specific types. Below is an example of using the server variable of velt. const { server } = require ( 'velt' ); server . createCommand ( 'abc' , { playerOnly : 'Only players can run this' }, async sender => { sender . sendMessage ( 'Tell me \"hello\"!' ); while ( true ) { //manager.waitFor allows asynchronously for us to wait for an event that matches the condition. let event = await server . waitFor ( 'AsyncPlayerChatEvent' , event => event . getPlayer () === sender ); if ( event . getMessage () == 'hello' ) { sender . sendMessage ( 'Good job.' ); event . setCancelled ( true ); return ; } else { sender . sendMessage ( `I said tell me hello, not ${ event . getMessage () } ` ); event . setCancelled ( true ); } } });","title":"The velt module"},{"location":"#the-velt-helpers-module","text":"The velt-helpers module offers classes which can help make your code easier to read and more concise. Below is an example of using the Gui class of velt-helpers . const { server } = require ( 'velt' ); const { Gui } = require ( 'velt-helpers' ); server . createCommand ( 'showgui' , sender => { if ( manager . isConsole ( sender )) { sender . sendMessage ( 'Only players can run this' ); return ; } new Gui ( 'My Gui' , 36 ) . format ( 0 , 'wooden sword' , () => { sender . sendMessage ( 'You clicked me' ); }) . show ( sender ); });","title":"The velt-helpers module"},{"location":"#node-modules","text":"Many NodeJS core modules are supported, but particularly, the following aren't supported: http https ws vm The fs module also is only partially supported.","title":"Node modules"},{"location":"basics/","text":"The Basics Handling the implementations of basic features like commands in Velt. Commands As you saw in the modules section, the velt module can be used to create commands. The velt module offers a few helpful variables. The one we'll mainly be looking at is server , as it offers direct control over handling commands and events. The other function we'll be needing is color , which has the alias of c . This turns a string such as &6Abcd to a colored string with the text Abcd in gold. The following import will allow you to get both the server object and the color function. const { server , c } = require ( 'velt' ); server.createCommand has multiple usages, shown below: server . createCommand ( name ); server . createCommand ( options ); server . createCommand ( callback ); //Takes command name from callback function name. server . createCommand ( name , options ); server . createCommand ( name , callback ); server . createCommand ( name , options , callback ); The following options can be used: { description : string , usage : string , aliases : Array < string > , label : string , callback : ( sender , ... args ) => any , tabComplete : ( sender , ... args ) => any , name : string , permission : string , permissionMessage : string , playerOnly : boolean | string , //Allows for blocking the console to run the command. argParser : str => Array < string > //Allows for custom parsing of arguments, eg with quotes } However, you can also chain callback and tabComplete if needed. This allows for the following to be valid. server . createCommand ( 'name' ). run (( sender , ... args ) => { sender . sendMessage ( 'Hello!' ); }); Although that is generally not the recommended approach. A better approach would be this: server . createCommand ( 'name' , ( sender , ... args ) => { sender . sendMessage ( 'Hello!' ); }). tabComplete (( sender , ... args ) => { return [ 'tabCompleted' ]; }); However in that case, the recommended approach would be using options for that. server . createCommand ( 'name' , { run ( sender , ... args ) { sender . sendMessage ( 'Hello!' ); }, tabComplete ( sender , ... args ) { return [ 'tabCompleted' ]; } }); This allows for a clear and readable way to show your callback and tab completion. Now, using commands itself. Let's start with a basic command. server . createCommand ( 'cmd' , sender => { //You can ignore specifying arguments if they aren't needed sender . sendMessage ( 'Hello world!' ); }); The above command is great, but it doesn't really do much. Let's try using something that might be more useful. server . createCommand ( 'feed' , { permission : 'velt.feed' }, sender => { sender . setFoodLevel ( 20 ); sender . sendMessage ( c ( '&6You have been saturated!' )); }); However, this won't work if the sender is a console. There are two ways to account for this. Firstly, you can manually block the console from running the command like so. server . createCommand ( 'feed' , { permission : 'velt.feed' }, sender => { if ( manager . isConsole ( sender )) { sender . sendMessage ( c ( '&cOnly players can run the feed command.' )); return ; } sender . setFoodLevel ( 20 ); sender . sendMessage ( c ( '&6You have been saturated!' )); }); The alternative is to specify this in your options, which is generally the preferred way. server . createCommand ( 'feed' , { permission : 'velt.feed' , playerOnly : c ( '&cOnly players can run the feed command' ) }, sender => { sender . setFoodLevel ( 20 ); sender . sendMessage ( c ( '&6You have been saturated!' )); }); If you want to specify arguments, you can do it like so. server . createCommand ( 'cmd' , ( sender , ... args ) => { sender . sendMessage ( c ( `&6Your arguments are: &c ${ args . join ( ', ' ) } ` )); }); By default, Velt processes arguments itself so that you can use quotations for arguments. You can disable this by overriding argParser. server . createCommand ( 'cmd' , { argParser : null //Use minecraft's default arg parsing. }, ( sender , ... args ) => { sender . sendMessage ( 'This is a command' ); }); Now, you can use Minecraft's builtin command system without support for arguments with over a space. Events As you know, the server variable from the velt module handles broadcasting, scheduling, callbacks, commands and events. Events are essential to scripting powerful scripts in Minecraft, since they allow you to handle everything that happens in your server, from a player chatting, to every single mob that spawns, to when a player right clicks their mouse, events are for handling it. The main way for you to handle your events is using the manager.on function, which takes in the event name, and a callback which handles the event. const { server } = require ( 'velt' ); server . on ( 'AsyncPlayerChatEvent' , event => { event . setFormat ( ` ${ event . getPlayer (). getDisplayName () } > ${ event . getMessage () } ` ); }); Above is a basic example of how to use events in Velt. You can handle any Spigot event and even events from other plugins. server . on ( 'PlayerJoinEvent' , event => { event . setJoinMessage ( `[+] ${ event . getPlayer () } ` ); }); Something to note is that there can be multiple event handlers listening for a callback, and that you can close event handlers. let handler = server . on ( 'PlayerJoinEvent' , event => { event . setJoinMessage ( ` ${ event . getPlayer () } has joined.` ); handler . close (); }); Another way to listen for events is server.once, which will listen for a single event. server . on ( 'PlayerJoinEvent' , event => { event . setJoinMessage ( ` ${ event . getPlayer () } has joined.` ); }); However, one of the best ways to listen for events is using server.waitFor, which will return a promise that resolves when the event that matches the condition is detected. This can be extremely useful for detecting events within your code, and can simplify your scripts heavily, especially when combined with JavaScript's async-await syntax. server . createCommand ( 'abc' , async sender => { sender . sendMessage ( 'Tell me hello.' ); while ( true ) { let event = await server . waitFor ( 'AsyncPlayerChatEvent' , event => event . getPlayer () === sender ); if ( event . getMessage () == 'hello' ) { sender . sendMessage ( 'Good job.' ); event . setCancelled ( true ); return ; } else { sender . sendMessage ( 'You did not tell me hello, so tell me hello!' ); event . setCancelled ( true ) } } }); Scheduling Tasks To start, you'll need to import the server variable from the velt module. Normal Tasks Velt allows you to schedule both normal tasks and looping tasks. Normal tasks can be scheduled with a promise. server . after ( 5 , () => { //Run after 5 ticks }); server . after ({ seconds : 1 }, () => { //Run after 1 second }); You can also asynchronously schedule tasks. ( async () => { await server . after ( 5 ); console . log ( 'Run after 5 ticks' ); await server . after ({ seconds : 1 }); console . log ( 'Run 1 second after the 5 ticks were waited' ); })(); Looping Tasks Periodic tasks, or looping tasks, can also be scheduled in a similar way, except using a single callback and not a promise. server . schedule ({ seconds : 1 }, () => { console . log ( 'This is called every second' ); }); You can also asynchronously use server.after to simulate the above example. ( async () => { while ( true ) { await server . after ({ seconds : 1 }); console . log ( 'This is called every second' ); } })(); However, you can also use server.schedule as a scheduler object to simulate the above example asynchronously much more easily and much better for performance. ( async () => { const scheduler = server . schedule ({ seconds : 1 }); while ( true ) { await scheduler . next (); console . log ( 'This is called every second' ); } })(); Creating Configs You'll need to import Storage from velt-helpers. const { Storage } = require ( 'velt-storage' ); Velt can save configurations to JSON and YAML, which can either be manually specified, or defaults to the file extension. //Create a config from the ./config.yml file. let config = Storage . createConfig ( './config.yml' ); //Create a config from the ./config.yml file with a default object for a value if the path doesn't exist. let config = Storage . createConfig ( './config.yml' , {}); \u200b //Update config properties with an object config . set ({ a : 1 , b : 2 , c : 3 }); \u200b //Get properties via destructuring const { a , b , c } = config . get (); \u200b //Utilize fields for getting and setting config . field ( 'a' ). set ( 1 ); config . field ( 'b' ). get (); \u200b //Save the config; config . save (); //Save the config as a specific type. config . save ({ type : 'json' }); config . save ({ type : 'yaml' }); //Save the config at a specific path config . save ( 'config.json' ); //Save the config at a specific path with a specific type config . save ( 'config.yml' , { type : 'json' }); Creating GUIs With Velt, you can make powerful, effective GUIs with very little code using Velt's utility module, velt-helpers . For GUI creation, you need to import the Gui class. const { Gui } = require ( 'velt-helpers' ); Next, create your GUI by initializing it with the name, and number of rows. const gui = new Gui ( 'My GUI' , 6 ); Now, you can format items onto the GUI with gui.format (or alternatively with the alias gui.set ) gui . format ( 0 , 'diamond sword' ); gui . format ( 1 , 'iron sword' ); You can also make it so when you click on an item, a callback is run. gui . format ( 2 , 'stone sword' , () => server . broadcast ( 'The stone sword was clicked!' )); //Alternative option gui . format ( 2 , 'stone sword' , { run() { server . broadcast ( 'The stone sword was clicked!' ); } }); GUIs can be shown to players with the gui.show method (or alternatively, using gui.open ). gui . show ( player ); gui . show ( playerOne , playerTwo ); gui . show (... arrayOfPlayers ); Most of the time, you should use method-chaining with GUIs, since it's simple and much easier to use. new Gui ( 'My GUI' , 6 ) . format ( 0 , 'diamond sword' ) . format ( 1 , 'iron sword' ) . format ( 2 , 'stone sword' , () => server . broadcast ( 'I got clicked!' )) . show ( player ); When formatting an item, a lot of the time you want to close the GUI after clicking it. You can do that like so. gui . format ( 0 , 'stone block' , { close : true , //Make it close after clicking it run() { server . broadcast ( 'I was clicked!' ); } }); You can also make a GUI item movable, so you can move it across the GUI to other slots. gui . format ( 1 , 'iron ingot' , { movable : true }); Utilizing Scoreboards Scoreboards is yet another helper class from the velt-helpers module, so to use scoreboards you will need to import Scoreboard from the velt-helpers module like so. const { Scoreboard } = require ( 'velt-helpers' ); Scoreboards can be initialized in several ways, using a list, or using an object with key-value pairs, or using method chaining. //Explicit scoreboard setting example \u200b let scoreboard = new Scoreboard (); \u200b scoreboard . setName ( 'My Scoreboard' ); scoreboard . set ( 1 , 'First Value' ); scoreboard . set ( 0 , 'Second Value' ); \u200b scoreboard . show ( player ); \u200b //Using an object \u200b let scoreboard = new Scoreboard ({ name : 'My Scoreboard' , scores : { 1 : 'First Value' , 0 : 'Second Value' } }). show ( player ); \u200b //Using an array instead of numbers (numbers auto-filled in) \u200b let scoreboard = new Scoreboard ({ name : 'My Scoreboard' , scores : [ 'First Value' , 'Second Value' ] }). show ( player ); \u200b //Combining objects and lists with a non-method chaining solution. \u200b let scoreboard = new Scoreboard (); \u200b scoreboard . setName ( 'My Scoreboard' ); \u200b //Use an object \u200b scoreboard . set ({ 1 : 'First Value' , 0 : 'Second Value' }); \u200b //Use an array \u200b scoreboard . set ([ 'First Value' , 'Second Value' ]); \u200b //Method chaining \u200b let scoreboard = new Scoreboard () . setName ( 'My Scoreboard' ) . set ( 1 , 'First Value' ) . set ( 0 , 'Second Value' ) . show ( player ); Making Use of Storage Storage is by far one of the most useful features in Velt, as a lot of the time you need to store data across restarts and variables just won't cut it. Storage allows for getting and setting individual fields of JSON files, YAML files (to come), and databases entirely at some point. Firstly, you need to import the Storage class from velt-storage . const { Storage } = require ( 'velt-storage' ); Storage can be created from a file as its path. const storage = new Storage ( './data.json' ); The storage can be manually used with the .get and .set methods to handle data. storage . get (); //Gets the value of the storage storage . set ({ hello : 'world' }); //Sets the value of the storage Here's an example of a spawn command, and a setspawn command. server . createCommand ( 'spawn' , sender => { storage . get ()[ 'spawn' ]. teleport ( sender ); }); server . createCommand ( 'setspawn' , sender => { storage . set ({ ... storage . get (), spawn : sender.getLocation () }); }); Here's an example of a GUI which allows you to increment a number and keeps your progress across restarts. function Gui ( player ) { let num = storage . get ()[ 'value' ] ? storage . get ()[ 'value' ] : 0 ; new Gui ( `Number: ${ num } ` , 6 ) . set ( 0 , { material : 'iron ingot' , name : c `&6Increase counter by 1` }, () => { storage . set ({ ... storage . get (), value : num + 1 }); Gui ( player ); }); } However, both of these are not very readable as you have to get the entire storage value and then get a specific field, and when setting it, you have to update the entire storage and keep everything but one value. For more complex cases like kits and warps, this would be even more complex. This is where the field comes in, it can simplify using the storage dramatically by only making you set one field at a time. Here's our spawn example, but using a field. const spawn = storage . field ( 'spawn' ); server . createCommand ( 'spawn' , sender => { spawn . get (). teleport ( sender ); }); server . createCommand ( 'setspawn' , sender => { spawn . set ( sender . getLocation ()); }); And here's our GUI counter using a value field. const value = storage . field ( 'value' , { default : 0 }); function Gui ( player ) { new Gui ( `Number: ${ value . get () } ` , 6 ) . set ( 0 , { material : 'iron ingot' , name : c `&6Increase counter by 1` }, () => { value . add ( 1 ); Gui ( player ); }); } The benefits of using fields are especially useful when you need to use arrays or objects to store things like warps and kits. The following is an example of a warp system using storage fields. const warps = storage . field ( 'warps' , { default : {} }); function setWarp ( name , loc ) { warps . field ( name ). set ( cast . asLocation ( loc )); } function gotoWarp ( player , name ) { player . teleport ( warps . field ( name ). get ()); } function removeWarp ( name ) { warps . pop ( name ); } The following is an example of a kits system using storage fields. const kits = storage . field ( 'kits' , { default : {} }); function createKit ( player , name ) { kits . field ( name ). set ( new Inventory ( player )); } function giveKit ( player , name ) { kits . field ( name ). get (). give ( player ); } function removeKit ( name ) { kits . pop ( name ); } Importing Java Classes With Velt, you have plenty of features built-in and easily accessible, like making commands, listening for events, equipping players with armor, saving inventories to a JSON file with velt-storage , but it doesn't support everything. Not every part of Spigot is supported with Velt, and Velt doesn't have any support for other plugins directly. Fortunately, Velt does have support for importing Java classes. Infact, it uses it directly in the source code of the core of Velt, which you can view here . There are two ways to import a Java class in Velt. The recommended approach is to use Java.pkg (or alternatively, Java.package ), like so: const { Player } = Java . pkg ( 'org.bukkit.entity' ); There are two reasons why you should generally use Java.pkg over Java.type : - It makes it so you don't need to repeat the class name twice. - It lets you easily import multiple classes at once. The other approach, Java.type , lets you import a class more directly, like so: const Player = Java . type ( 'org.bukkit.entity.Player' ); Both work well, but Java.pkg is generally prefered.","title":"Basics"},{"location":"basics/#the-basics","text":"Handling the implementations of basic features like commands in Velt.","title":"The Basics"},{"location":"basics/#commands","text":"As you saw in the modules section, the velt module can be used to create commands. The velt module offers a few helpful variables. The one we'll mainly be looking at is server , as it offers direct control over handling commands and events. The other function we'll be needing is color , which has the alias of c . This turns a string such as &6Abcd to a colored string with the text Abcd in gold. The following import will allow you to get both the server object and the color function. const { server , c } = require ( 'velt' ); server.createCommand has multiple usages, shown below: server . createCommand ( name ); server . createCommand ( options ); server . createCommand ( callback ); //Takes command name from callback function name. server . createCommand ( name , options ); server . createCommand ( name , callback ); server . createCommand ( name , options , callback ); The following options can be used: { description : string , usage : string , aliases : Array < string > , label : string , callback : ( sender , ... args ) => any , tabComplete : ( sender , ... args ) => any , name : string , permission : string , permissionMessage : string , playerOnly : boolean | string , //Allows for blocking the console to run the command. argParser : str => Array < string > //Allows for custom parsing of arguments, eg with quotes } However, you can also chain callback and tabComplete if needed. This allows for the following to be valid. server . createCommand ( 'name' ). run (( sender , ... args ) => { sender . sendMessage ( 'Hello!' ); }); Although that is generally not the recommended approach. A better approach would be this: server . createCommand ( 'name' , ( sender , ... args ) => { sender . sendMessage ( 'Hello!' ); }). tabComplete (( sender , ... args ) => { return [ 'tabCompleted' ]; }); However in that case, the recommended approach would be using options for that. server . createCommand ( 'name' , { run ( sender , ... args ) { sender . sendMessage ( 'Hello!' ); }, tabComplete ( sender , ... args ) { return [ 'tabCompleted' ]; } }); This allows for a clear and readable way to show your callback and tab completion. Now, using commands itself. Let's start with a basic command. server . createCommand ( 'cmd' , sender => { //You can ignore specifying arguments if they aren't needed sender . sendMessage ( 'Hello world!' ); }); The above command is great, but it doesn't really do much. Let's try using something that might be more useful. server . createCommand ( 'feed' , { permission : 'velt.feed' }, sender => { sender . setFoodLevel ( 20 ); sender . sendMessage ( c ( '&6You have been saturated!' )); }); However, this won't work if the sender is a console. There are two ways to account for this. Firstly, you can manually block the console from running the command like so. server . createCommand ( 'feed' , { permission : 'velt.feed' }, sender => { if ( manager . isConsole ( sender )) { sender . sendMessage ( c ( '&cOnly players can run the feed command.' )); return ; } sender . setFoodLevel ( 20 ); sender . sendMessage ( c ( '&6You have been saturated!' )); }); The alternative is to specify this in your options, which is generally the preferred way. server . createCommand ( 'feed' , { permission : 'velt.feed' , playerOnly : c ( '&cOnly players can run the feed command' ) }, sender => { sender . setFoodLevel ( 20 ); sender . sendMessage ( c ( '&6You have been saturated!' )); }); If you want to specify arguments, you can do it like so. server . createCommand ( 'cmd' , ( sender , ... args ) => { sender . sendMessage ( c ( `&6Your arguments are: &c ${ args . join ( ', ' ) } ` )); }); By default, Velt processes arguments itself so that you can use quotations for arguments. You can disable this by overriding argParser. server . createCommand ( 'cmd' , { argParser : null //Use minecraft's default arg parsing. }, ( sender , ... args ) => { sender . sendMessage ( 'This is a command' ); }); Now, you can use Minecraft's builtin command system without support for arguments with over a space.","title":"Commands"},{"location":"basics/#events","text":"As you know, the server variable from the velt module handles broadcasting, scheduling, callbacks, commands and events. Events are essential to scripting powerful scripts in Minecraft, since they allow you to handle everything that happens in your server, from a player chatting, to every single mob that spawns, to when a player right clicks their mouse, events are for handling it. The main way for you to handle your events is using the manager.on function, which takes in the event name, and a callback which handles the event. const { server } = require ( 'velt' ); server . on ( 'AsyncPlayerChatEvent' , event => { event . setFormat ( ` ${ event . getPlayer (). getDisplayName () } > ${ event . getMessage () } ` ); }); Above is a basic example of how to use events in Velt. You can handle any Spigot event and even events from other plugins. server . on ( 'PlayerJoinEvent' , event => { event . setJoinMessage ( `[+] ${ event . getPlayer () } ` ); }); Something to note is that there can be multiple event handlers listening for a callback, and that you can close event handlers. let handler = server . on ( 'PlayerJoinEvent' , event => { event . setJoinMessage ( ` ${ event . getPlayer () } has joined.` ); handler . close (); }); Another way to listen for events is server.once, which will listen for a single event. server . on ( 'PlayerJoinEvent' , event => { event . setJoinMessage ( ` ${ event . getPlayer () } has joined.` ); }); However, one of the best ways to listen for events is using server.waitFor, which will return a promise that resolves when the event that matches the condition is detected. This can be extremely useful for detecting events within your code, and can simplify your scripts heavily, especially when combined with JavaScript's async-await syntax. server . createCommand ( 'abc' , async sender => { sender . sendMessage ( 'Tell me hello.' ); while ( true ) { let event = await server . waitFor ( 'AsyncPlayerChatEvent' , event => event . getPlayer () === sender ); if ( event . getMessage () == 'hello' ) { sender . sendMessage ( 'Good job.' ); event . setCancelled ( true ); return ; } else { sender . sendMessage ( 'You did not tell me hello, so tell me hello!' ); event . setCancelled ( true ) } } });","title":"Events"},{"location":"basics/#scheduling-tasks","text":"To start, you'll need to import the server variable from the velt module.","title":"Scheduling Tasks"},{"location":"basics/#normal-tasks","text":"Velt allows you to schedule both normal tasks and looping tasks. Normal tasks can be scheduled with a promise. server . after ( 5 , () => { //Run after 5 ticks }); server . after ({ seconds : 1 }, () => { //Run after 1 second }); You can also asynchronously schedule tasks. ( async () => { await server . after ( 5 ); console . log ( 'Run after 5 ticks' ); await server . after ({ seconds : 1 }); console . log ( 'Run 1 second after the 5 ticks were waited' ); })();","title":"Normal Tasks"},{"location":"basics/#looping-tasks","text":"Periodic tasks, or looping tasks, can also be scheduled in a similar way, except using a single callback and not a promise. server . schedule ({ seconds : 1 }, () => { console . log ( 'This is called every second' ); }); You can also asynchronously use server.after to simulate the above example. ( async () => { while ( true ) { await server . after ({ seconds : 1 }); console . log ( 'This is called every second' ); } })(); However, you can also use server.schedule as a scheduler object to simulate the above example asynchronously much more easily and much better for performance. ( async () => { const scheduler = server . schedule ({ seconds : 1 }); while ( true ) { await scheduler . next (); console . log ( 'This is called every second' ); } })();","title":"Looping Tasks"},{"location":"basics/#creating-configs","text":"You'll need to import Storage from velt-helpers. const { Storage } = require ( 'velt-storage' ); Velt can save configurations to JSON and YAML, which can either be manually specified, or defaults to the file extension. //Create a config from the ./config.yml file. let config = Storage . createConfig ( './config.yml' ); //Create a config from the ./config.yml file with a default object for a value if the path doesn't exist. let config = Storage . createConfig ( './config.yml' , {}); \u200b //Update config properties with an object config . set ({ a : 1 , b : 2 , c : 3 }); \u200b //Get properties via destructuring const { a , b , c } = config . get (); \u200b //Utilize fields for getting and setting config . field ( 'a' ). set ( 1 ); config . field ( 'b' ). get (); \u200b //Save the config; config . save (); //Save the config as a specific type. config . save ({ type : 'json' }); config . save ({ type : 'yaml' }); //Save the config at a specific path config . save ( 'config.json' ); //Save the config at a specific path with a specific type config . save ( 'config.yml' , { type : 'json' });","title":"Creating Configs"},{"location":"basics/#creating-guis","text":"With Velt, you can make powerful, effective GUIs with very little code using Velt's utility module, velt-helpers . For GUI creation, you need to import the Gui class. const { Gui } = require ( 'velt-helpers' ); Next, create your GUI by initializing it with the name, and number of rows. const gui = new Gui ( 'My GUI' , 6 ); Now, you can format items onto the GUI with gui.format (or alternatively with the alias gui.set ) gui . format ( 0 , 'diamond sword' ); gui . format ( 1 , 'iron sword' ); You can also make it so when you click on an item, a callback is run. gui . format ( 2 , 'stone sword' , () => server . broadcast ( 'The stone sword was clicked!' )); //Alternative option gui . format ( 2 , 'stone sword' , { run() { server . broadcast ( 'The stone sword was clicked!' ); } }); GUIs can be shown to players with the gui.show method (or alternatively, using gui.open ). gui . show ( player ); gui . show ( playerOne , playerTwo ); gui . show (... arrayOfPlayers ); Most of the time, you should use method-chaining with GUIs, since it's simple and much easier to use. new Gui ( 'My GUI' , 6 ) . format ( 0 , 'diamond sword' ) . format ( 1 , 'iron sword' ) . format ( 2 , 'stone sword' , () => server . broadcast ( 'I got clicked!' )) . show ( player ); When formatting an item, a lot of the time you want to close the GUI after clicking it. You can do that like so. gui . format ( 0 , 'stone block' , { close : true , //Make it close after clicking it run() { server . broadcast ( 'I was clicked!' ); } }); You can also make a GUI item movable, so you can move it across the GUI to other slots. gui . format ( 1 , 'iron ingot' , { movable : true });","title":"Creating GUIs"},{"location":"basics/#utilizing-scoreboards","text":"Scoreboards is yet another helper class from the velt-helpers module, so to use scoreboards you will need to import Scoreboard from the velt-helpers module like so. const { Scoreboard } = require ( 'velt-helpers' ); Scoreboards can be initialized in several ways, using a list, or using an object with key-value pairs, or using method chaining. //Explicit scoreboard setting example \u200b let scoreboard = new Scoreboard (); \u200b scoreboard . setName ( 'My Scoreboard' ); scoreboard . set ( 1 , 'First Value' ); scoreboard . set ( 0 , 'Second Value' ); \u200b scoreboard . show ( player ); \u200b //Using an object \u200b let scoreboard = new Scoreboard ({ name : 'My Scoreboard' , scores : { 1 : 'First Value' , 0 : 'Second Value' } }). show ( player ); \u200b //Using an array instead of numbers (numbers auto-filled in) \u200b let scoreboard = new Scoreboard ({ name : 'My Scoreboard' , scores : [ 'First Value' , 'Second Value' ] }). show ( player ); \u200b //Combining objects and lists with a non-method chaining solution. \u200b let scoreboard = new Scoreboard (); \u200b scoreboard . setName ( 'My Scoreboard' ); \u200b //Use an object \u200b scoreboard . set ({ 1 : 'First Value' , 0 : 'Second Value' }); \u200b //Use an array \u200b scoreboard . set ([ 'First Value' , 'Second Value' ]); \u200b //Method chaining \u200b let scoreboard = new Scoreboard () . setName ( 'My Scoreboard' ) . set ( 1 , 'First Value' ) . set ( 0 , 'Second Value' ) . show ( player );","title":"Utilizing Scoreboards"},{"location":"basics/#making-use-of-storage","text":"Storage is by far one of the most useful features in Velt, as a lot of the time you need to store data across restarts and variables just won't cut it. Storage allows for getting and setting individual fields of JSON files, YAML files (to come), and databases entirely at some point. Firstly, you need to import the Storage class from velt-storage . const { Storage } = require ( 'velt-storage' ); Storage can be created from a file as its path. const storage = new Storage ( './data.json' ); The storage can be manually used with the .get and .set methods to handle data. storage . get (); //Gets the value of the storage storage . set ({ hello : 'world' }); //Sets the value of the storage Here's an example of a spawn command, and a setspawn command. server . createCommand ( 'spawn' , sender => { storage . get ()[ 'spawn' ]. teleport ( sender ); }); server . createCommand ( 'setspawn' , sender => { storage . set ({ ... storage . get (), spawn : sender.getLocation () }); }); Here's an example of a GUI which allows you to increment a number and keeps your progress across restarts. function Gui ( player ) { let num = storage . get ()[ 'value' ] ? storage . get ()[ 'value' ] : 0 ; new Gui ( `Number: ${ num } ` , 6 ) . set ( 0 , { material : 'iron ingot' , name : c `&6Increase counter by 1` }, () => { storage . set ({ ... storage . get (), value : num + 1 }); Gui ( player ); }); } However, both of these are not very readable as you have to get the entire storage value and then get a specific field, and when setting it, you have to update the entire storage and keep everything but one value. For more complex cases like kits and warps, this would be even more complex. This is where the field comes in, it can simplify using the storage dramatically by only making you set one field at a time. Here's our spawn example, but using a field. const spawn = storage . field ( 'spawn' ); server . createCommand ( 'spawn' , sender => { spawn . get (). teleport ( sender ); }); server . createCommand ( 'setspawn' , sender => { spawn . set ( sender . getLocation ()); }); And here's our GUI counter using a value field. const value = storage . field ( 'value' , { default : 0 }); function Gui ( player ) { new Gui ( `Number: ${ value . get () } ` , 6 ) . set ( 0 , { material : 'iron ingot' , name : c `&6Increase counter by 1` }, () => { value . add ( 1 ); Gui ( player ); }); } The benefits of using fields are especially useful when you need to use arrays or objects to store things like warps and kits. The following is an example of a warp system using storage fields. const warps = storage . field ( 'warps' , { default : {} }); function setWarp ( name , loc ) { warps . field ( name ). set ( cast . asLocation ( loc )); } function gotoWarp ( player , name ) { player . teleport ( warps . field ( name ). get ()); } function removeWarp ( name ) { warps . pop ( name ); } The following is an example of a kits system using storage fields. const kits = storage . field ( 'kits' , { default : {} }); function createKit ( player , name ) { kits . field ( name ). set ( new Inventory ( player )); } function giveKit ( player , name ) { kits . field ( name ). get (). give ( player ); } function removeKit ( name ) { kits . pop ( name ); }","title":"Making Use of Storage"},{"location":"basics/#importing-java-classes","text":"With Velt, you have plenty of features built-in and easily accessible, like making commands, listening for events, equipping players with armor, saving inventories to a JSON file with velt-storage , but it doesn't support everything. Not every part of Spigot is supported with Velt, and Velt doesn't have any support for other plugins directly. Fortunately, Velt does have support for importing Java classes. Infact, it uses it directly in the source code of the core of Velt, which you can view here . There are two ways to import a Java class in Velt. The recommended approach is to use Java.pkg (or alternatively, Java.package ), like so: const { Player } = Java . pkg ( 'org.bukkit.entity' ); There are two reasons why you should generally use Java.pkg over Java.type : - It makes it so you don't need to repeat the class name twice. - It lets you easily import multiple classes at once. The other approach, Java.type , lets you import a class more directly, like so: const Player = Java . type ( 'org.bukkit.entity.Player' ); Both work well, but Java.pkg is generally prefered.","title":"Importing Java Classes"},{"location":"utilities/","text":"Utilities Some utilities which aren't necessarily as essential as the core parts of velt , or some of the more useful parts of velt-helpers , but can definitely still be very useful depending on what you're using them for. Creating Custom Mobs Firstly, a clarification. Velt does not allow you to create entirely new mobs with new sound effects and textures, but it does allow you to remix existing mobs to what you want, like a zombie with 50 health and runs twice as fast. Firstly, let's take a look at the following example: const { server } = require ( 'velt' ); const { equip , effect } = require ( 'velt-helpers' ); //Assume loc is already defined, and spawn a zombie with some armor and speed. const zombie = server . summon ( 'zombie' , loc ); equip ( zombie , { helmet : 'leather helmet' , chestplate : 'chainmail chestplate' , leggings : 'leather leggings' , boots : 'leather boots' }); effect ( zombie , 'speed' , { amplifier : 1 , duration : 10000 }); However, that may be inconvenient and somewhat ugly, especially if you want to reuse it. const summonCustom = loc => { const zombie = server . summon ( 'zombie' , loc ); equip ( zombie , { helmet : 'leather helmet' , chestplate : 'chainmail chestplate' , leggings : 'leather leggings' , boots : 'leather boots' }); effect ( zombie , 'speed' , { amplifier : 1 , duration : 10000 }); }; CustomMob offers a much nicer alternative. const zombie = new CustomMob ({ type : 'zombie' , equipment : { helmet : 'leather helmet' , chestplate : 'chainmail chestplate' , leggings : 'leather leggings' , boots : 'leather boots' }, effects : [ { type : 'speed' , amplifier : 1 , duration : 10000 } ] }); zombie . summon ( loc ); When creating a CustomMob, you can also add custom mechanics. For example, if you wanted to make a zombie which shoots a fireball every second, CustomMob has support for that with its cycle option. const zombie = new CustomMob ({ type : 'zombie' , cycle() { server . schedule ({ seconds : 1 }, () => { this . shoot ( 'fireball' ); }); } }); zombie . summon ( loc ); In short, Velt's CustomMob utility allows for adding custom mechanics to mobs much easier. Creating Custom Items Firstly, just to clarify, the custom items you can make in Velt aren't new items with new textures and sounds, but just adding in new features to existing items with specific names and properties. To start, what if you wanted to implement a stick with a special name that lets you shoot a fireball when you right click it? Velt custom items would be the way to go. const { c } = require ( 'velt' ); const { Item , shoot } = require ( 'velt-helpers' ); new Item ({ name : c `Fireball Shooter` , interact ( event ) { event . setCancelled ( true ); const player = event . getPlayer (); shoot ( player , 'fireball' ); } }); You can also make it so you can be given a custom item with Item.give const snowballShooter = new Item ({ name : c `Snowball Shooter` , interact ( event ) { event . setCancelled ( true ); const player = event . getPlayer (); shoot ( player , 'snowball' ); } }); server . createCommand ( 'shooter' , sender => { snowballShooter . give ( sender ); }); The Item utility for creating custom items isn't finalized, but it's quite useful.","title":"Utilities"},{"location":"utilities/#utilities","text":"Some utilities which aren't necessarily as essential as the core parts of velt , or some of the more useful parts of velt-helpers , but can definitely still be very useful depending on what you're using them for.","title":"Utilities"},{"location":"utilities/#creating-custom-mobs","text":"Firstly, a clarification. Velt does not allow you to create entirely new mobs with new sound effects and textures, but it does allow you to remix existing mobs to what you want, like a zombie with 50 health and runs twice as fast. Firstly, let's take a look at the following example: const { server } = require ( 'velt' ); const { equip , effect } = require ( 'velt-helpers' ); //Assume loc is already defined, and spawn a zombie with some armor and speed. const zombie = server . summon ( 'zombie' , loc ); equip ( zombie , { helmet : 'leather helmet' , chestplate : 'chainmail chestplate' , leggings : 'leather leggings' , boots : 'leather boots' }); effect ( zombie , 'speed' , { amplifier : 1 , duration : 10000 }); However, that may be inconvenient and somewhat ugly, especially if you want to reuse it. const summonCustom = loc => { const zombie = server . summon ( 'zombie' , loc ); equip ( zombie , { helmet : 'leather helmet' , chestplate : 'chainmail chestplate' , leggings : 'leather leggings' , boots : 'leather boots' }); effect ( zombie , 'speed' , { amplifier : 1 , duration : 10000 }); }; CustomMob offers a much nicer alternative. const zombie = new CustomMob ({ type : 'zombie' , equipment : { helmet : 'leather helmet' , chestplate : 'chainmail chestplate' , leggings : 'leather leggings' , boots : 'leather boots' }, effects : [ { type : 'speed' , amplifier : 1 , duration : 10000 } ] }); zombie . summon ( loc ); When creating a CustomMob, you can also add custom mechanics. For example, if you wanted to make a zombie which shoots a fireball every second, CustomMob has support for that with its cycle option. const zombie = new CustomMob ({ type : 'zombie' , cycle() { server . schedule ({ seconds : 1 }, () => { this . shoot ( 'fireball' ); }); } }); zombie . summon ( loc ); In short, Velt's CustomMob utility allows for adding custom mechanics to mobs much easier.","title":"Creating Custom Mobs"},{"location":"utilities/#creating-custom-items","text":"Firstly, just to clarify, the custom items you can make in Velt aren't new items with new textures and sounds, but just adding in new features to existing items with specific names and properties. To start, what if you wanted to implement a stick with a special name that lets you shoot a fireball when you right click it? Velt custom items would be the way to go. const { c } = require ( 'velt' ); const { Item , shoot } = require ( 'velt-helpers' ); new Item ({ name : c `Fireball Shooter` , interact ( event ) { event . setCancelled ( true ); const player = event . getPlayer (); shoot ( player , 'fireball' ); } }); You can also make it so you can be given a custom item with Item.give const snowballShooter = new Item ({ name : c `Snowball Shooter` , interact ( event ) { event . setCancelled ( true ); const player = event . getPlayer (); shoot ( player , 'snowball' ); } }); server . createCommand ( 'shooter' , sender => { snowballShooter . give ( sender ); }); The Item utility for creating custom items isn't finalized, but it's quite useful.","title":"Creating Custom Items"}]}